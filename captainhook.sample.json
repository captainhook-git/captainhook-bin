{
    "config": {
        "verbosity": "normal",
        "fail-on-first-error": false,
        "ansi-colors": true,
        "git-directory": ".git",
        "includes": [],
        "run-path": "tools/captainhook",
        "run-async": true,
        "custom": {
            "foo": "bar",
            "fiz": "baz"
        }
    },
    "hooks": {
        "commit-msg": {
            "actions": [
                {
                    "run": "CaptainHook::Message.MustFollowBeamsRules",
                    "options": {
                        "subject-length": 50,
                        "body-line-length": 72
                    }
                },
                {
                    "run": "CaptainHook::Message.ContainsRegex",
                    "options": {
                        "regex": ".*"
                    }
                },
                {
                    "run": "CaptainHook::Message.CacheOnFail",
                    "options": {
                        "file": ".git/CH_COMMIT_MESSAGE.tmp"
                    }
                }
            ]
        },
        "pre-push": {
            "actions": [
                {
                    "run": "CaptainHook::Branch.BlockFixupAndSquashCommits"
                },
                {
                    "run": "echo foo"
                }
            ]
        },
        "pre-commit": {
            "actions": [
                {
                    "run": "echo foo"
                },
                {
                    "run": "CaptainHook::File.DoesNotContainRegex",
                    "options": {
                        "regex": "foooo"
                    }
                },
                {
                    "run": "CaptainHook::File.IsNotEmpty",
                    "options": {
                        "files": [
                            "some/file/that/cant/be/empty",
                            "other/file/that/cant/be/empty"
                        ]
                    }
                },
                {
                    "run": "CaptainHook::File.MaxSize",
                    "config": {
                        "allow-failure": true
                    },
                    "options": {
                        "max-size": "1M"
                    }
                },
                {
                    "run": "echo bar"
                },
                {
                    "action": "echo \"{$STAGED_FILES|of-type:md|separated-by: }\"",
                    "conditions": [
                        {
                            "run": "CaptainHook::FileStaged.ThatIs",
                            "options": {
                                "of-type": "go"
                            }
                        }
                    ]
                }
            ]
        },
        "prepare-commit-msg": {
            "actions": [
                {
                    "run": "CaptainHook::Message.PrepareFromFile",
                    "options": {
                        "file": ".git/CH_COMMIT_MESSAGE.tmp"
                    }
                }
            ]
        },
        "post-change": {
            "actions": [
                {
                    "run": "CaptainHook::Notify.GitNotify"
                }
            ]
        }
    }
}
